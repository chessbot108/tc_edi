We will solve the problem using dp. When solving for dp(i, k) (where i is the amount of turns, and k is the last letter), we have two cases.
First we define pre(a, k) is the amount of points the player will get if you played letter a for the first k turns

Case 1: i != N
We have dp(i, k) = max(dp(j, k) + pre(i, k) - pre(j, k)), where k < j <= i-k

Case 2: i = N
We have dp(i, k) = max(dp(j, k) + pre(i, k) - pre(j, k)), but this time k < j <= i because at the end there doesn't need to be K cards of the same type.

To do this in linear time, we precompute pre(i, j) and maintain an array val[] containing the max value of max(dp(i, m), 0<=m<=2) - pre(j, k)) for each k, and have
dp(i, k) = val[j] + pre(i, k)

With this adjustment, it is solvable in linear time.
